// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.code4schener.route.domain.Delivery;
import org.code4schener.route.domain.ParamLog;
import org.code4schener.route.service.api.DeliveryService;
import org.code4schener.route.service.api.ParamLogService;
import org.code4schener.route.web.DeliveriesCollectionThymeleafController;
import org.code4schener.route.web.DeliveriesCollectionThymeleafLinkFactory;
import org.code4schener.route.web.DeliveriesItemParamsThymeleafController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect DeliveriesItemParamsThymeleafController_Roo_Thymeleaf {
    
    declare @type: DeliveriesItemParamsThymeleafController: @Controller;
    
    declare @type: DeliveriesItemParamsThymeleafController: @RequestMapping(value = "/deliveries/{delivery}/params", name = "DeliveriesItemParamsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DeliveryService DeliveriesItemParamsThymeleafController.deliveryService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ParamLogService DeliveriesItemParamsThymeleafController.paramLogService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource DeliveriesItemParamsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<DeliveriesCollectionThymeleafController> DeliveriesItemParamsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService DeliveriesItemParamsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param deliveryService
     * @param paramLogService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public DeliveriesItemParamsThymeleafController.new(DeliveryService deliveryService, ParamLogService paramLogService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setDeliveryService(deliveryService);
        setParamLogService(paramLogService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(DeliveriesCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DeliveryService
     */
    public DeliveryService DeliveriesItemParamsThymeleafController.getDeliveryService() {
        return deliveryService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryService
     */
    public void DeliveriesItemParamsThymeleafController.setDeliveryService(DeliveryService deliveryService) {
        this.deliveryService = deliveryService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ParamLogService
     */
    public ParamLogService DeliveriesItemParamsThymeleafController.getParamLogService() {
        return paramLogService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param paramLogService
     */
    public void DeliveriesItemParamsThymeleafController.setParamLogService(ParamLogService paramLogService) {
        this.paramLogService = paramLogService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource DeliveriesItemParamsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void DeliveriesItemParamsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<DeliveriesCollectionThymeleafController> DeliveriesItemParamsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void DeliveriesItemParamsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<DeliveriesCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService DeliveriesItemParamsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void DeliveriesItemParamsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Delivery
     */
    @ModelAttribute
    public Delivery DeliveriesItemParamsThymeleafController.getDelivery(@PathVariable("delivery") Long id, Locale locale, HttpMethod method) {
        Delivery delivery = null;
        if (HttpMethod.PUT.equals(method)) {
            delivery = deliveryService.findOneForUpdate(id);
        } else {
            delivery = deliveryService.findOne(id);
        }
        
        if (delivery == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Delivery", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return delivery;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DeliveriesItemParamsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DeliveriesItemParamsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<ParamLog>> DeliveriesItemParamsThymeleafController.datatables(@ModelAttribute Delivery delivery, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<ParamLog> params = getParamLogService().findByDelivery(delivery, search, pageable);
        long totalParamsCount = getParamLogService().countByDelivery(delivery);
        ConvertedDatatablesData<ParamLog> data =  new ConvertedDatatablesData<ParamLog>(params, totalParamsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<ParamLog>> DeliveriesItemParamsThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<ParamLog> params = getParamLogService().findAllByIdsIn(ids, search, pageable);
        long totalParamsCount = params.getTotalElements();
        ConvertedDatatablesData<ParamLog> data =  new ConvertedDatatablesData<ParamLog>(params, totalParamsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView DeliveriesItemParamsThymeleafController.createForm(@ModelAttribute Delivery delivery, Model model) {
        populateForm(model);
        model.addAttribute("paramLog", new ParamLog());
        return new ModelAndView("deliveries/params/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param paramsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromParams", value = "/{paramsToRemove}")
    @ResponseBody
    public ResponseEntity<?> DeliveriesItemParamsThymeleafController.removeFromParams(@ModelAttribute Delivery delivery, @PathVariable("paramsToRemove") Long paramsToRemove) {
        getDeliveryService().removeFromParams(delivery,Collections.singleton(paramsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param paramsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromParamsBatch", value = "/batch/{paramsToRemove}")
    @ResponseBody
    public ResponseEntity<?> DeliveriesItemParamsThymeleafController.removeFromParamsBatch(@ModelAttribute Delivery delivery, @PathVariable("paramsToRemove") Collection<Long> paramsToRemove) {
        getDeliveryService().removeFromParams(delivery, paramsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param params
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView DeliveriesItemParamsThymeleafController.create(@ModelAttribute Delivery delivery, @RequestParam(value = "paramsIds", required = false) List<Long> params, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (params != null) {
            for (Iterator<Long> iterator = params.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, delivery.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (params != null) {
                delivery.setParams(new HashSet<ParamLog>(getParamLogService().findAll(params)));
            }else{
                delivery.setParams(new HashSet<ParamLog>());
            }
            // Reset the version to prevent update
             delivery.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("delivery", delivery);
            model.addAttribute("concurrency", true);
            return new ModelAndView("deliveries/params/create");
        }else if(!Objects.equals(version, delivery.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("delivery", delivery);
            model.addAttribute("concurrency", false);
            return new ModelAndView("deliveries/params/create");
        }
        getDeliveryService().setParams(delivery,params);
        return new ModelAndView("redirect:" + getCollectionLink().to(DeliveriesCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
