// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.web;

import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.code4schener.route.domain.Delivery;
import org.code4schener.route.service.api.DeliveryService;
import org.code4schener.route.web.DeliveriesItemJsonController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect DeliveriesItemJsonController_Roo_JSON {
    
    declare @type: DeliveriesItemJsonController: @RestController;
    
    declare @type: DeliveriesItemJsonController: @RequestMapping(value = "/api/deliveries/{delivery}", name = "DeliveriesItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DeliveryService DeliveriesItemJsonController.deliveryService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param deliveryService
     */
    @Autowired
    public DeliveriesItemJsonController.new(DeliveryService deliveryService) {
        this.deliveryService = deliveryService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DeliveryService
     */
    public DeliveryService DeliveriesItemJsonController.getDeliveryService() {
        return deliveryService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryService
     */
    public void DeliveriesItemJsonController.setDeliveryService(DeliveryService deliveryService) {
        this.deliveryService = deliveryService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Delivery
     */
    @ModelAttribute
    public Delivery DeliveriesItemJsonController.getDelivery(@PathVariable("delivery") Long id) {
        Delivery delivery = deliveryService.findOne(id);
        if (delivery == null) {
            throw new NotFoundException(String.format("Delivery with identifier '%s' not found",id));
        }
        return delivery;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> DeliveriesItemJsonController.show(@ModelAttribute Delivery delivery) {
        return ResponseEntity.ok(delivery);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @return UriComponents
     */
    public static UriComponents DeliveriesItemJsonController.showURI(Delivery delivery) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(DeliveriesItemJsonController.class).show(delivery))
            .buildAndExpand(delivery.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedDelivery
     * @param delivery
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> DeliveriesItemJsonController.update(@ModelAttribute Delivery storedDelivery, @Valid @RequestBody Delivery delivery, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        delivery.setId(storedDelivery.getId());
        getDeliveryService().save(delivery);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> DeliveriesItemJsonController.delete(@ModelAttribute Delivery delivery) {
        getDeliveryService().delete(delivery);
        return ResponseEntity.ok().build();
    }
    
}
