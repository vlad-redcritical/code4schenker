// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.code4schener.route.domain.DeliveryParam;
import org.code4schener.route.domain.ParamLog;
import org.code4schener.route.service.api.DeliveryParamService;
import org.code4schener.route.service.api.ParamLogService;
import org.code4schener.route.web.DeliveryParamsCollectionThymeleafController;
import org.code4schener.route.web.DeliveryParamsCollectionThymeleafLinkFactory;
import org.code4schener.route.web.DeliveryParamsItemLogParamsThymeleafController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect DeliveryParamsItemLogParamsThymeleafController_Roo_Thymeleaf {
    
    declare @type: DeliveryParamsItemLogParamsThymeleafController: @Controller;
    
    declare @type: DeliveryParamsItemLogParamsThymeleafController: @RequestMapping(value = "/deliveryparams/{deliveryParam}/logParams", name = "DeliveryParamsItemLogParamsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DeliveryParamService DeliveryParamsItemLogParamsThymeleafController.deliveryParamService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ParamLogService DeliveryParamsItemLogParamsThymeleafController.paramLogService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource DeliveryParamsItemLogParamsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<DeliveryParamsCollectionThymeleafController> DeliveryParamsItemLogParamsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService DeliveryParamsItemLogParamsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param deliveryParamService
     * @param paramLogService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public DeliveryParamsItemLogParamsThymeleafController.new(DeliveryParamService deliveryParamService, ParamLogService paramLogService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setDeliveryParamService(deliveryParamService);
        setParamLogService(paramLogService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(DeliveryParamsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DeliveryParamService
     */
    public DeliveryParamService DeliveryParamsItemLogParamsThymeleafController.getDeliveryParamService() {
        return deliveryParamService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParamService
     */
    public void DeliveryParamsItemLogParamsThymeleafController.setDeliveryParamService(DeliveryParamService deliveryParamService) {
        this.deliveryParamService = deliveryParamService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ParamLogService
     */
    public ParamLogService DeliveryParamsItemLogParamsThymeleafController.getParamLogService() {
        return paramLogService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param paramLogService
     */
    public void DeliveryParamsItemLogParamsThymeleafController.setParamLogService(ParamLogService paramLogService) {
        this.paramLogService = paramLogService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource DeliveryParamsItemLogParamsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void DeliveryParamsItemLogParamsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<DeliveryParamsCollectionThymeleafController> DeliveryParamsItemLogParamsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void DeliveryParamsItemLogParamsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<DeliveryParamsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService DeliveryParamsItemLogParamsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void DeliveryParamsItemLogParamsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return DeliveryParam
     */
    @ModelAttribute
    public DeliveryParam DeliveryParamsItemLogParamsThymeleafController.getDeliveryParam(@PathVariable("deliveryParam") Long id, Locale locale, HttpMethod method) {
        DeliveryParam deliveryParam = null;
        if (HttpMethod.PUT.equals(method)) {
            deliveryParam = deliveryParamService.findOneForUpdate(id);
        } else {
            deliveryParam = deliveryParamService.findOne(id);
        }
        
        if (deliveryParam == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"DeliveryParam", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return deliveryParam;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DeliveryParamsItemLogParamsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DeliveryParamsItemLogParamsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<ParamLog>> DeliveryParamsItemLogParamsThymeleafController.datatables(@ModelAttribute DeliveryParam deliveryParam, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<ParamLog> logParams = getParamLogService().findByDeliveryParam(deliveryParam, search, pageable);
        long totalLogParamsCount = getParamLogService().countByDeliveryParam(deliveryParam);
        ConvertedDatatablesData<ParamLog> data =  new ConvertedDatatablesData<ParamLog>(logParams, totalLogParamsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<ParamLog>> DeliveryParamsItemLogParamsThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<ParamLog> logParams = getParamLogService().findAllByIdsIn(ids, search, pageable);
        long totalLogParamsCount = logParams.getTotalElements();
        ConvertedDatatablesData<ParamLog> data =  new ConvertedDatatablesData<ParamLog>(logParams, totalLogParamsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView DeliveryParamsItemLogParamsThymeleafController.createForm(@ModelAttribute DeliveryParam deliveryParam, Model model) {
        populateForm(model);
        model.addAttribute("paramLog", new ParamLog());
        return new ModelAndView("deliveryparams/logParams/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param logParamsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromLogParams", value = "/{logParamsToRemove}")
    @ResponseBody
    public ResponseEntity<?> DeliveryParamsItemLogParamsThymeleafController.removeFromLogParams(@ModelAttribute DeliveryParam deliveryParam, @PathVariable("logParamsToRemove") Long logParamsToRemove) {
        getDeliveryParamService().removeFromLogParams(deliveryParam,Collections.singleton(logParamsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param logParamsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromLogParamsBatch", value = "/batch/{logParamsToRemove}")
    @ResponseBody
    public ResponseEntity<?> DeliveryParamsItemLogParamsThymeleafController.removeFromLogParamsBatch(@ModelAttribute DeliveryParam deliveryParam, @PathVariable("logParamsToRemove") Collection<Long> logParamsToRemove) {
        getDeliveryParamService().removeFromLogParams(deliveryParam, logParamsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param logParams
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView DeliveryParamsItemLogParamsThymeleafController.create(@ModelAttribute DeliveryParam deliveryParam, @RequestParam(value = "logParamsIds", required = false) List<Long> logParams, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (logParams != null) {
            for (Iterator<Long> iterator = logParams.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, deliveryParam.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (logParams != null) {
                deliveryParam.setLogParams(new HashSet<ParamLog>(getParamLogService().findAll(logParams)));
            }else{
                deliveryParam.setLogParams(new HashSet<ParamLog>());
            }
            // Reset the version to prevent update
             deliveryParam.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("deliveryParam", deliveryParam);
            model.addAttribute("concurrency", true);
            return new ModelAndView("deliveryparams/logParams/create");
        }else if(!Objects.equals(version, deliveryParam.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("deliveryParam", deliveryParam);
            model.addAttribute("concurrency", false);
            return new ModelAndView("deliveryparams/logParams/create");
        }
        getDeliveryParamService().setLogParams(deliveryParam,logParams);
        return new ModelAndView("redirect:" + getCollectionLink().to(DeliveryParamsCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
