// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.web;

import io.springlets.data.web.validation.GenericValidator;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import io.springlets.web.mvc.util.concurrency.ConcurrencyCallback;
import io.springlets.web.mvc.util.concurrency.ConcurrencyManager;
import io.springlets.web.mvc.util.concurrency.ConcurrencyTemplate;
import java.util.Locale;
import javax.validation.Valid;
import org.code4schener.route.domain.LocationLog;
import org.code4schener.route.service.api.LocationLogService;
import org.code4schener.route.web.LocationLogsCollectionThymeleafController;
import org.code4schener.route.web.LocationLogsItemThymeleafController;
import org.code4schener.route.web.LocationLogsItemThymeleafLinkFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponents;

privileged aspect LocationLogsItemThymeleafController_Roo_Thymeleaf {
    
    declare @type: LocationLogsItemThymeleafController: @Controller;
    
    declare @type: LocationLogsItemThymeleafController: @RequestMapping(value = "/locationlogs/{locationLog}", name = "LocationLogsItemThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private LocationLogService LocationLogsItemThymeleafController.locationLogService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource LocationLogsItemThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<LocationLogsItemThymeleafController> LocationLogsItemThymeleafController.itemLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<LocationLogsCollectionThymeleafController> LocationLogsItemThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private final ConcurrencyTemplate<LocationLog> LocationLogsItemThymeleafController.concurrencyTemplate = new ConcurrencyTemplate<LocationLog>(this);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param locationLogService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public LocationLogsItemThymeleafController.new(LocationLogService locationLogService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setLocationLogService(locationLogService);
        setMessageSource(messageSource);
        setItemLink(linkBuilder.of(LocationLogsItemThymeleafController.class));
        setCollectionLink(linkBuilder.of(LocationLogsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return LocationLogService
     */
    public LocationLogService LocationLogsItemThymeleafController.getLocationLogService() {
        return locationLogService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param locationLogService
     */
    public void LocationLogsItemThymeleafController.setLocationLogService(LocationLogService locationLogService) {
        this.locationLogService = locationLogService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource LocationLogsItemThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void LocationLogsItemThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<LocationLogsItemThymeleafController> LocationLogsItemThymeleafController.getItemLink() {
        return itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param itemLink
     */
    public void LocationLogsItemThymeleafController.setItemLink(MethodLinkBuilderFactory<LocationLogsItemThymeleafController> itemLink) {
        this.itemLink = itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<LocationLogsCollectionThymeleafController> LocationLogsItemThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void LocationLogsItemThymeleafController.setCollectionLink(MethodLinkBuilderFactory<LocationLogsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return LocationLog
     */
    @ModelAttribute
    public LocationLog LocationLogsItemThymeleafController.getLocationLog(@PathVariable("locationLog") Long id, Locale locale, HttpMethod method) {
        LocationLog locationLog = null;
        if (HttpMethod.PUT.equals(method)) {
            locationLog = locationLogService.findOneForUpdate(id);
        } else {
            locationLog = locationLogService.findOne(id);
        }
        
        if (locationLog == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"LocationLog", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return locationLog;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param locationLog
     * @param model
     * @return ModelAndView
     */
    @GetMapping(name = "show")
    public ModelAndView LocationLogsItemThymeleafController.show(@ModelAttribute LocationLog locationLog, Model model) {
        model.addAttribute("locationLog", locationLog);
        return new ModelAndView("locationlogs/show");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param locationLog
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/inline", name = "showInline")
    public ModelAndView LocationLogsItemThymeleafController.showInline(@ModelAttribute LocationLog locationLog, Model model) {
        model.addAttribute("locationLog", locationLog);
        return new ModelAndView("locationlogs/showInline :: inline-content");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void LocationLogsItemThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void LocationLogsItemThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConcurrencyTemplate
     */
    public ConcurrencyTemplate<LocationLog> LocationLogsItemThymeleafController.getConcurrencyTemplate() {
        return concurrencyTemplate;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String LocationLogsItemThymeleafController.getModelName() {
        return "locationLog";
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String LocationLogsItemThymeleafController.getEditViewPath() {
        return "locationlogs/edit";
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param record
     * @return Integer
     */
    public Integer LocationLogsItemThymeleafController.getLastVersion(LocationLog record) {
        return getLocationLogService().findOne(record.getId()).getVersion();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @param model
     * @return ModelAndView
     */
    public ModelAndView LocationLogsItemThymeleafController.populateAndGetFormView(LocationLog entity, Model model) {
        // Populate the form with all the necessary elements
        populateForm(model);
        // Add concurrency attribute to the model to show the concurrency form
        // in the current edit view
        model.addAttribute("concurrency", true);
        // Add the new version value to the model.
        model.addAttribute("newVersion", getLastVersion(entity));
        // Add the current pet values to maintain the values introduced by the user
        model.addAttribute(getModelName(), entity);
        // Return the edit view path
        return new org.springframework.web.servlet.ModelAndView(getEditViewPath(), model.asMap());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param binder
     */
    @InitBinder("locationLog")
    public void LocationLogsItemThymeleafController.initLocationLogBinder(WebDataBinder binder) {
        binder.setDisallowedFields("id");
        // Register validators
        GenericValidator validator = new GenericValidator(LocationLog.class, getLocationLogService());
        binder.addValidators(validator);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param locationLog
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/edit-form", name = "editForm")
    public ModelAndView LocationLogsItemThymeleafController.editForm(@ModelAttribute LocationLog locationLog, Model model) {
        populateForm(model);
        
        model.addAttribute("locationLog", locationLog);
        return new ModelAndView("locationlogs/edit");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param locationLog
     * @param result
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PutMapping(name = "update")
    public ModelAndView LocationLogsItemThymeleafController.update(@Valid @ModelAttribute LocationLog locationLog, BindingResult result, @RequestParam("version") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Check if provided form contain errors
        if (result.hasErrors()) {
            populateForm(model);
            return new ModelAndView(getEditViewPath());
        }
        // Create Concurrency Spring Template to ensure that the following code will manage the
        // possible concurrency exceptions that appears and execute the provided coded inside the Spring template.
        // If some concurrency exception appears the template will manage it.
        LocationLog savedLocationLog = getConcurrencyTemplate().execute(locationLog, model, new ConcurrencyCallback<LocationLog>() {
            @Override
            public LocationLog doInConcurrency(LocationLog locationLog) throws Exception {
                return getLocationLogService().save(locationLog);
            }
        });
        UriComponents showURI = getItemLink().to(LocationLogsItemThymeleafLinkFactory.SHOW).with("locationLog", savedLocationLog.getId()).toUri();
        return new ModelAndView("redirect:" + showURI.toUriString());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param locationLog
     * @return ResponseEntity
     */
    @ResponseBody
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> LocationLogsItemThymeleafController.delete(@ModelAttribute LocationLog locationLog) {
        getLocationLogService().delete(locationLog);
        return ResponseEntity.ok().build();
    }
    
}
