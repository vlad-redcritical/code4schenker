// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.web;

import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.code4schener.route.domain.ParamLog;
import org.code4schener.route.service.api.ParamLogService;
import org.code4schener.route.web.ParamLogsItemJsonController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect ParamLogsItemJsonController_Roo_JSON {
    
    declare @type: ParamLogsItemJsonController: @RestController;
    
    declare @type: ParamLogsItemJsonController: @RequestMapping(value = "/api/paramlogs/{paramLog}", name = "ParamLogsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ParamLogService ParamLogsItemJsonController.paramLogService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param paramLogService
     */
    @Autowired
    public ParamLogsItemJsonController.new(ParamLogService paramLogService) {
        this.paramLogService = paramLogService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ParamLogService
     */
    public ParamLogService ParamLogsItemJsonController.getParamLogService() {
        return paramLogService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param paramLogService
     */
    public void ParamLogsItemJsonController.setParamLogService(ParamLogService paramLogService) {
        this.paramLogService = paramLogService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return ParamLog
     */
    @ModelAttribute
    public ParamLog ParamLogsItemJsonController.getParamLog(@PathVariable("paramLog") Long id) {
        ParamLog paramLog = paramLogService.findOne(id);
        if (paramLog == null) {
            throw new NotFoundException(String.format("ParamLog with identifier '%s' not found",id));
        }
        return paramLog;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param paramLog
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> ParamLogsItemJsonController.show(@ModelAttribute ParamLog paramLog) {
        return ResponseEntity.ok(paramLog);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param paramLog
     * @return UriComponents
     */
    public static UriComponents ParamLogsItemJsonController.showURI(ParamLog paramLog) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(ParamLogsItemJsonController.class).show(paramLog))
            .buildAndExpand(paramLog.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedParamLog
     * @param paramLog
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> ParamLogsItemJsonController.update(@ModelAttribute ParamLog storedParamLog, @Valid @RequestBody ParamLog paramLog, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        paramLog.setId(storedParamLog.getId());
        getParamLogService().save(paramLog);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param paramLog
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> ParamLogsItemJsonController.delete(@ModelAttribute ParamLog paramLog) {
        getParamLogService().delete(paramLog);
        return ResponseEntity.ok().build();
    }
    
}
