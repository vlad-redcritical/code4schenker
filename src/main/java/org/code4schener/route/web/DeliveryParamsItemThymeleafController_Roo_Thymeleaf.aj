// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.web;

import io.springlets.data.web.validation.GenericValidator;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import io.springlets.web.mvc.util.concurrency.ConcurrencyCallback;
import io.springlets.web.mvc.util.concurrency.ConcurrencyManager;
import io.springlets.web.mvc.util.concurrency.ConcurrencyTemplate;
import java.util.Locale;
import javax.validation.Valid;
import org.code4schener.route.domain.DeliveryParam;
import org.code4schener.route.service.api.DeliveryParamService;
import org.code4schener.route.web.DeliveryParamsCollectionThymeleafController;
import org.code4schener.route.web.DeliveryParamsItemThymeleafController;
import org.code4schener.route.web.DeliveryParamsItemThymeleafLinkFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponents;

privileged aspect DeliveryParamsItemThymeleafController_Roo_Thymeleaf {
    
    declare @type: DeliveryParamsItemThymeleafController: @Controller;
    
    declare @type: DeliveryParamsItemThymeleafController: @RequestMapping(value = "/deliveryparams/{deliveryParam}", name = "DeliveryParamsItemThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DeliveryParamService DeliveryParamsItemThymeleafController.deliveryParamService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource DeliveryParamsItemThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<DeliveryParamsItemThymeleafController> DeliveryParamsItemThymeleafController.itemLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<DeliveryParamsCollectionThymeleafController> DeliveryParamsItemThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private final ConcurrencyTemplate<DeliveryParam> DeliveryParamsItemThymeleafController.concurrencyTemplate = new ConcurrencyTemplate<DeliveryParam>(this);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param deliveryParamService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public DeliveryParamsItemThymeleafController.new(DeliveryParamService deliveryParamService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setDeliveryParamService(deliveryParamService);
        setMessageSource(messageSource);
        setItemLink(linkBuilder.of(DeliveryParamsItemThymeleafController.class));
        setCollectionLink(linkBuilder.of(DeliveryParamsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DeliveryParamService
     */
    public DeliveryParamService DeliveryParamsItemThymeleafController.getDeliveryParamService() {
        return deliveryParamService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParamService
     */
    public void DeliveryParamsItemThymeleafController.setDeliveryParamService(DeliveryParamService deliveryParamService) {
        this.deliveryParamService = deliveryParamService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource DeliveryParamsItemThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void DeliveryParamsItemThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<DeliveryParamsItemThymeleafController> DeliveryParamsItemThymeleafController.getItemLink() {
        return itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param itemLink
     */
    public void DeliveryParamsItemThymeleafController.setItemLink(MethodLinkBuilderFactory<DeliveryParamsItemThymeleafController> itemLink) {
        this.itemLink = itemLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<DeliveryParamsCollectionThymeleafController> DeliveryParamsItemThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void DeliveryParamsItemThymeleafController.setCollectionLink(MethodLinkBuilderFactory<DeliveryParamsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return DeliveryParam
     */
    @ModelAttribute
    public DeliveryParam DeliveryParamsItemThymeleafController.getDeliveryParam(@PathVariable("deliveryParam") Long id, Locale locale, HttpMethod method) {
        DeliveryParam deliveryParam = null;
        if (HttpMethod.PUT.equals(method)) {
            deliveryParam = deliveryParamService.findOneForUpdate(id);
        } else {
            deliveryParam = deliveryParamService.findOne(id);
        }
        
        if (deliveryParam == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"DeliveryParam", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return deliveryParam;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param model
     * @return ModelAndView
     */
    @GetMapping(name = "show")
    public ModelAndView DeliveryParamsItemThymeleafController.show(@ModelAttribute DeliveryParam deliveryParam, Model model) {
        model.addAttribute("deliveryParam", deliveryParam);
        return new ModelAndView("deliveryparams/show");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/inline", name = "showInline")
    public ModelAndView DeliveryParamsItemThymeleafController.showInline(@ModelAttribute DeliveryParam deliveryParam, Model model) {
        model.addAttribute("deliveryParam", deliveryParam);
        return new ModelAndView("deliveryparams/showInline :: inline-content");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DeliveryParamsItemThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DeliveryParamsItemThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConcurrencyTemplate
     */
    public ConcurrencyTemplate<DeliveryParam> DeliveryParamsItemThymeleafController.getConcurrencyTemplate() {
        return concurrencyTemplate;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String DeliveryParamsItemThymeleafController.getModelName() {
        return "deliveryParam";
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String DeliveryParamsItemThymeleafController.getEditViewPath() {
        return "deliveryparams/edit";
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param record
     * @return Integer
     */
    public Integer DeliveryParamsItemThymeleafController.getLastVersion(DeliveryParam record) {
        return getDeliveryParamService().findOne(record.getId()).getVersion();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @param model
     * @return ModelAndView
     */
    public ModelAndView DeliveryParamsItemThymeleafController.populateAndGetFormView(DeliveryParam entity, Model model) {
        // Populate the form with all the necessary elements
        populateForm(model);
        // Add concurrency attribute to the model to show the concurrency form
        // in the current edit view
        model.addAttribute("concurrency", true);
        // Add the new version value to the model.
        model.addAttribute("newVersion", getLastVersion(entity));
        // Add the current pet values to maintain the values introduced by the user
        model.addAttribute(getModelName(), entity);
        // Return the edit view path
        return new org.springframework.web.servlet.ModelAndView(getEditViewPath(), model.asMap());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param binder
     */
    @InitBinder("deliveryParam")
    public void DeliveryParamsItemThymeleafController.initDeliveryParamBinder(WebDataBinder binder) {
        binder.setDisallowedFields("id");
        // Register validators
        GenericValidator validator = new GenericValidator(DeliveryParam.class, getDeliveryParamService());
        binder.addValidators(validator);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/edit-form", name = "editForm")
    public ModelAndView DeliveryParamsItemThymeleafController.editForm(@ModelAttribute DeliveryParam deliveryParam, Model model) {
        populateForm(model);
        
        model.addAttribute("deliveryParam", deliveryParam);
        return new ModelAndView("deliveryparams/edit");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param result
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PutMapping(name = "update")
    public ModelAndView DeliveryParamsItemThymeleafController.update(@Valid @ModelAttribute DeliveryParam deliveryParam, BindingResult result, @RequestParam("version") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Check if provided form contain errors
        if (result.hasErrors()) {
            populateForm(model);
            return new ModelAndView(getEditViewPath());
        }
        // Create Concurrency Spring Template to ensure that the following code will manage the
        // possible concurrency exceptions that appears and execute the provided coded inside the Spring template.
        // If some concurrency exception appears the template will manage it.
        DeliveryParam savedDeliveryParam = getConcurrencyTemplate().execute(deliveryParam, model, new ConcurrencyCallback<DeliveryParam>() {
            @Override
            public DeliveryParam doInConcurrency(DeliveryParam deliveryParam) throws Exception {
                return getDeliveryParamService().save(deliveryParam);
            }
        });
        UriComponents showURI = getItemLink().to(DeliveryParamsItemThymeleafLinkFactory.SHOW).with("deliveryParam", savedDeliveryParam.getId()).toUri();
        return new ModelAndView("redirect:" + showURI.toUriString());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @return ResponseEntity
     */
    @ResponseBody
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> DeliveryParamsItemThymeleafController.delete(@ModelAttribute DeliveryParam deliveryParam) {
        getDeliveryParamService().delete(deliveryParam);
        return ResponseEntity.ok().build();
    }
    
}
