// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.code4schener.route.domain.Delivery;
import org.code4schener.route.domain.Transit;
import org.code4schener.route.service.api.DeliveryService;
import org.code4schener.route.service.api.TransitService;
import org.code4schener.route.web.DeliveriesCollectionThymeleafController;
import org.code4schener.route.web.DeliveriesCollectionThymeleafLinkFactory;
import org.code4schener.route.web.DeliveriesItemTransitsThymeleafController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect DeliveriesItemTransitsThymeleafController_Roo_Thymeleaf {
    
    declare @type: DeliveriesItemTransitsThymeleafController: @Controller;
    
    declare @type: DeliveriesItemTransitsThymeleafController: @RequestMapping(value = "/deliveries/{delivery}/transits", name = "DeliveriesItemTransitsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DeliveryService DeliveriesItemTransitsThymeleafController.deliveryService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private TransitService DeliveriesItemTransitsThymeleafController.transitService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource DeliveriesItemTransitsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<DeliveriesCollectionThymeleafController> DeliveriesItemTransitsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService DeliveriesItemTransitsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param deliveryService
     * @param transitService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public DeliveriesItemTransitsThymeleafController.new(DeliveryService deliveryService, TransitService transitService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setDeliveryService(deliveryService);
        setTransitService(transitService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(DeliveriesCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DeliveryService
     */
    public DeliveryService DeliveriesItemTransitsThymeleafController.getDeliveryService() {
        return deliveryService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryService
     */
    public void DeliveriesItemTransitsThymeleafController.setDeliveryService(DeliveryService deliveryService) {
        this.deliveryService = deliveryService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return TransitService
     */
    public TransitService DeliveriesItemTransitsThymeleafController.getTransitService() {
        return transitService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param transitService
     */
    public void DeliveriesItemTransitsThymeleafController.setTransitService(TransitService transitService) {
        this.transitService = transitService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource DeliveriesItemTransitsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void DeliveriesItemTransitsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<DeliveriesCollectionThymeleafController> DeliveriesItemTransitsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void DeliveriesItemTransitsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<DeliveriesCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService DeliveriesItemTransitsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void DeliveriesItemTransitsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Delivery
     */
    @ModelAttribute
    public Delivery DeliveriesItemTransitsThymeleafController.getDelivery(@PathVariable("delivery") Long id, Locale locale, HttpMethod method) {
        Delivery delivery = null;
        if (HttpMethod.PUT.equals(method)) {
            delivery = deliveryService.findOneForUpdate(id);
        } else {
            delivery = deliveryService.findOne(id);
        }
        
        if (delivery == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Delivery", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return delivery;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DeliveriesItemTransitsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void DeliveriesItemTransitsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Transit>> DeliveriesItemTransitsThymeleafController.datatables(@ModelAttribute Delivery delivery, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Transit> transits = getTransitService().findByDelivery(delivery, search, pageable);
        long totalTransitsCount = getTransitService().countByDelivery(delivery);
        ConvertedDatatablesData<Transit> data =  new ConvertedDatatablesData<Transit>(transits, totalTransitsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Transit>> DeliveriesItemTransitsThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Transit> transits = getTransitService().findAllByIdsIn(ids, search, pageable);
        long totalTransitsCount = transits.getTotalElements();
        ConvertedDatatablesData<Transit> data =  new ConvertedDatatablesData<Transit>(transits, totalTransitsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView DeliveriesItemTransitsThymeleafController.createForm(@ModelAttribute Delivery delivery, Model model) {
        populateForm(model);
        model.addAttribute("transit", new Transit());
        return new ModelAndView("deliveries/transits/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param transitsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromTransits", value = "/{transitsToRemove}")
    @ResponseBody
    public ResponseEntity<?> DeliveriesItemTransitsThymeleafController.removeFromTransits(@ModelAttribute Delivery delivery, @PathVariable("transitsToRemove") Long transitsToRemove) {
        getDeliveryService().removeFromTransits(delivery,Collections.singleton(transitsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param transitsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromTransitsBatch", value = "/batch/{transitsToRemove}")
    @ResponseBody
    public ResponseEntity<?> DeliveriesItemTransitsThymeleafController.removeFromTransitsBatch(@ModelAttribute Delivery delivery, @PathVariable("transitsToRemove") Collection<Long> transitsToRemove) {
        getDeliveryService().removeFromTransits(delivery, transitsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param transits
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView DeliveriesItemTransitsThymeleafController.create(@ModelAttribute Delivery delivery, @RequestParam(value = "transitsIds", required = false) List<Long> transits, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (transits != null) {
            for (Iterator<Long> iterator = transits.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, delivery.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (transits != null) {
                delivery.setTransits(new HashSet<Transit>(getTransitService().findAll(transits)));
            }else{
                delivery.setTransits(new HashSet<Transit>());
            }
            // Reset the version to prevent update
             delivery.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("delivery", delivery);
            model.addAttribute("concurrency", true);
            return new ModelAndView("deliveries/transits/create");
        }else if(!Objects.equals(version, delivery.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("delivery", delivery);
            model.addAttribute("concurrency", false);
            return new ModelAndView("deliveries/transits/create");
        }
        getDeliveryService().setTransits(delivery,transits);
        return new ModelAndView("redirect:" + getCollectionLink().to(DeliveriesCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
