// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.code4schener.route.domain.Delivery;
import org.code4schener.route.domain.DeliveryParam;
import org.code4schener.route.domain.QDeliveryParam;
import org.code4schener.route.repository.DeliveryParamRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect DeliveryParamRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: DeliveryParamRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DeliveryParamRepositoryImpl.PARAM_NAME = "paramName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DeliveryParamRepositoryImpl.MIN_VALUE = "minValue";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DeliveryParamRepositoryImpl.MAX_VALUE = "maxValue";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DeliveryParamRepositoryImpl.UNIT = "unit";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DeliveryParamRepositoryImpl.DELIVERY = "delivery";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DeliveryParam> DeliveryParamRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDeliveryParam deliveryParam = QDeliveryParam.deliveryParam;
        
        JPQLQuery<DeliveryParam> query = from(deliveryParam);
        
        Path<?>[] paths = new Path<?>[] {deliveryParam.paramName,deliveryParam.minValue,deliveryParam.maxValue,deliveryParam.unit,deliveryParam.delivery};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PARAM_NAME, deliveryParam.paramName)
			.map(MIN_VALUE, deliveryParam.minValue)
			.map(MAX_VALUE, deliveryParam.maxValue)
			.map(UNIT, deliveryParam.unit)
			.map(DELIVERY, deliveryParam.delivery);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, deliveryParam);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DeliveryParam> DeliveryParamRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDeliveryParam deliveryParam = QDeliveryParam.deliveryParam;
        
        JPQLQuery<DeliveryParam> query = from(deliveryParam);
        
        Path<?>[] paths = new Path<?>[] {deliveryParam.paramName,deliveryParam.minValue,deliveryParam.maxValue,deliveryParam.unit,deliveryParam.delivery};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(deliveryParam.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PARAM_NAME, deliveryParam.paramName)
			.map(MIN_VALUE, deliveryParam.minValue)
			.map(MAX_VALUE, deliveryParam.maxValue)
			.map(UNIT, deliveryParam.unit)
			.map(DELIVERY, deliveryParam.delivery);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, deliveryParam);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DeliveryParam> DeliveryParamRepositoryImpl.findByDelivery(Delivery delivery, GlobalSearch globalSearch, Pageable pageable) {
        
        QDeliveryParam deliveryParam = QDeliveryParam.deliveryParam;
        
        JPQLQuery<DeliveryParam> query = from(deliveryParam);
        
        Assert.notNull(delivery, "delivery is required");
        
        query.where(deliveryParam.delivery.eq(delivery));
        Path<?>[] paths = new Path<?>[] {deliveryParam.paramName,deliveryParam.minValue,deliveryParam.maxValue,deliveryParam.unit,deliveryParam.delivery};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PARAM_NAME, deliveryParam.paramName)
			.map(MIN_VALUE, deliveryParam.minValue)
			.map(MAX_VALUE, deliveryParam.maxValue)
			.map(UNIT, deliveryParam.unit)
			.map(DELIVERY, deliveryParam.delivery);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, deliveryParam);
    }
    
}
