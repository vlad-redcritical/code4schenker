// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.code4schener.route.domain.Delivery;
import org.code4schener.route.domain.DeliveryParam;
import org.code4schener.route.domain.LocationLog;
import org.code4schener.route.domain.ParamLog;
import org.code4schener.route.domain.QParamLog;
import org.code4schener.route.repository.ParamLogRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ParamLogRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ParamLogRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ParamLogRepositoryImpl.PARAM_NAME = "paramName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ParamLogRepositoryImpl.PARAM_VALUE = "paramValue";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ParamLogRepositoryImpl.DELIVERY = "delivery";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ParamLogRepositoryImpl.LOCATION = "location";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ParamLogRepositoryImpl.DELIVERY_PARAM = "deliveryParam";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ParamLog> ParamLogRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QParamLog paramLog = QParamLog.paramLog;
        
        JPQLQuery<ParamLog> query = from(paramLog);
        
        Path<?>[] paths = new Path<?>[] {paramLog.paramName,paramLog.paramValue,paramLog.delivery,paramLog.location,paramLog.deliveryParam};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PARAM_NAME, paramLog.paramName)
			.map(PARAM_VALUE, paramLog.paramValue)
			.map(DELIVERY, paramLog.delivery)
			.map(LOCATION, paramLog.location)
			.map(DELIVERY_PARAM, paramLog.deliveryParam);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, paramLog);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ParamLog> ParamLogRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QParamLog paramLog = QParamLog.paramLog;
        
        JPQLQuery<ParamLog> query = from(paramLog);
        
        Path<?>[] paths = new Path<?>[] {paramLog.paramName,paramLog.paramValue,paramLog.delivery,paramLog.location,paramLog.deliveryParam};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(paramLog.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PARAM_NAME, paramLog.paramName)
			.map(PARAM_VALUE, paramLog.paramValue)
			.map(DELIVERY, paramLog.delivery)
			.map(LOCATION, paramLog.location)
			.map(DELIVERY_PARAM, paramLog.deliveryParam);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, paramLog);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param delivery
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ParamLog> ParamLogRepositoryImpl.findByDelivery(Delivery delivery, GlobalSearch globalSearch, Pageable pageable) {
        
        QParamLog paramLog = QParamLog.paramLog;
        
        JPQLQuery<ParamLog> query = from(paramLog);
        
        Assert.notNull(delivery, "delivery is required");
        
        query.where(paramLog.delivery.eq(delivery));
        Path<?>[] paths = new Path<?>[] {paramLog.paramName,paramLog.paramValue,paramLog.delivery,paramLog.location,paramLog.deliveryParam};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PARAM_NAME, paramLog.paramName)
			.map(PARAM_VALUE, paramLog.paramValue)
			.map(DELIVERY, paramLog.delivery)
			.map(LOCATION, paramLog.location)
			.map(DELIVERY_PARAM, paramLog.deliveryParam);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, paramLog);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param deliveryParam
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ParamLog> ParamLogRepositoryImpl.findByDeliveryParam(DeliveryParam deliveryParam, GlobalSearch globalSearch, Pageable pageable) {
        
        QParamLog paramLog = QParamLog.paramLog;
        
        JPQLQuery<ParamLog> query = from(paramLog);
        
        Assert.notNull(deliveryParam, "deliveryParam is required");
        
        query.where(paramLog.deliveryParam.eq(deliveryParam));
        Path<?>[] paths = new Path<?>[] {paramLog.paramName,paramLog.paramValue,paramLog.delivery,paramLog.location,paramLog.deliveryParam};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PARAM_NAME, paramLog.paramName)
			.map(PARAM_VALUE, paramLog.paramValue)
			.map(DELIVERY, paramLog.delivery)
			.map(LOCATION, paramLog.location)
			.map(DELIVERY_PARAM, paramLog.deliveryParam);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, paramLog);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param location
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ParamLog> ParamLogRepositoryImpl.findByLocation(LocationLog location, GlobalSearch globalSearch, Pageable pageable) {
        
        QParamLog paramLog = QParamLog.paramLog;
        
        JPQLQuery<ParamLog> query = from(paramLog);
        
        Assert.notNull(location, "location is required");
        
        query.where(paramLog.location.eq(location));
        Path<?>[] paths = new Path<?>[] {paramLog.paramName,paramLog.paramValue,paramLog.delivery,paramLog.location,paramLog.deliveryParam};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PARAM_NAME, paramLog.paramName)
			.map(PARAM_VALUE, paramLog.paramValue)
			.map(DELIVERY, paramLog.delivery)
			.map(LOCATION, paramLog.location)
			.map(DELIVERY_PARAM, paramLog.deliveryParam);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, paramLog);
    }
    
}
