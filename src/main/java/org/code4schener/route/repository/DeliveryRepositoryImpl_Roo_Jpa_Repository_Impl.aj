// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.code4schener.route.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.code4schener.route.domain.Delivery;
import org.code4schener.route.domain.QDelivery;
import org.code4schener.route.repository.DeliveryRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect DeliveryRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: DeliveryRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DeliveryRepositoryImpl.DELIVERY_NR = "deliveryNr";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DeliveryRepositoryImpl.CLIENT_NAME = "clientName";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Delivery> DeliveryRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDelivery delivery = QDelivery.delivery;
        
        JPQLQuery<Delivery> query = from(delivery);
        
        Path<?>[] paths = new Path<?>[] {delivery.deliveryNr,delivery.clientName};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DELIVERY_NR, delivery.deliveryNr)
			.map(CLIENT_NAME, delivery.clientName);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, delivery);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Delivery> DeliveryRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDelivery delivery = QDelivery.delivery;
        
        JPQLQuery<Delivery> query = from(delivery);
        
        Path<?>[] paths = new Path<?>[] {delivery.deliveryNr,delivery.clientName};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(delivery.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DELIVERY_NR, delivery.deliveryNr)
			.map(CLIENT_NAME, delivery.clientName);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, delivery);
    }
    
}
